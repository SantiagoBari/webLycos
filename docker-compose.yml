version: '3.8'

services:
  # 1. SERVICIO DE BACKEND (Flask + Gunicorn)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    expose:
      - 8000
    networks:
      - webnet
    # El backend necesita la base de datos para funcionar
    depends_on:
      - db 
    # Variables de entorno para la conexión a la DB (usadas por Flask)
    environment:
      POSTGRES_USER: lykos_user
      POSTGRES_PASSWORD: lykos_password # ¡Usar variables de entorno o Secretos en Prod!
      POSTGRES_DB: lykos_db
      DATABASE_HOST: db # Nombre del servicio Docker
      DATABASE_PORT: 5432 # Puerto interno de PostgreSQL

  # 2. SERVICIO DE FRONTEND (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - 3000
    depends_on:
      - backend
    networks:
      - webnet
    # # Bloque de volumes opcional
    # volumes:
    #   - ./frontend/public:/app/public

  # 3. SERVICIO DE PROXY INVERSO (Nginx)
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      # # Puerto HTTPS - Descomentar cuando uses Certbot y tengas dominio
      # - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # # Volúmenes SSL/Certbot - Descomentar para producción con dominio
      # - certs:/etc/letsencrypt
      # - certs-data:/usr/share/nginx/html/certbot
    depends_on:
      - frontend
    networks:
      - webnet

  # 4. SERVICIO DE BASE DE DATOS (PostgreSQL - NUEVO)
  db:
    image: postgres:15-alpine
    container_name: lykos_db_container
    # Puertos: expuesto solo a la red interna de Docker (webnet)
    expose:
      - 5432
    # Variables de entorno para PostgreSQL
    environment:
      POSTGRES_USER: lykos_user
      POSTGRES_PASSWORD: lykos_password
      POSTGRES_DB: lykos_db
    # Volumen para persistencia de datos (¡CRUCIAL!)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - webnet

  # # 5. SERVICIO DE CERTBOT (Comentado)
  # # Descomentar para producción con dominio
  # # certbot:
  # #   image: certbot/certbot
  # #   container_name: certbot
  # #   volumes:
  # #     - certs:/etc/letsencrypt
  # #     - certs-data:/usr/share/nginx/html/certbot
  # #   command: certonly --webroot -w /usr/share/nginx/html/certbot -d lykos.com -d www.lykos.com --email tu_email@ejemplo.com --agree-tos --non-interactive
  # #   networks:
  # #     - webnet

# Definición de Volúmenes (NUEVO - Solo el de la DB está activo)
volumes:
  postgres_data:
  # # Volúmenes SSL/Certbot - Descomentar para producción con dominio
  # certs:
  # certs-data:

# Definición de la red interna de Docker (webnet)
networks:
  webnet:
    driver: bridge
